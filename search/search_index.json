{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Random notes","text":"<p>This is a collection of random documentation I have needed for various projects.</p>"},{"location":"MKDocsHowTos/","title":"MKDocs","text":""},{"location":"MKDocsHowTos/#mkdocs-howtos","title":"MKDocs HowTos","text":"<p>MKDocs documentation is here</p> <ul> <li>Deploying this site</li> <li>Manually: run <code>mkdocs gh-deploy</code></li> <li> <p>CI set up via <code>.github/workflows/ci.yml</code> (following this)</p> </li> <li> <p>Material for Mkdocs: Good theme and documentation this link</p> </li> <li> <p>Publish site on Github-pages: this link</p> </li> <li> <p>Make links downloadable vs viewable - this SE post To <code>mkdocs.yml</code> add </p> </li> </ul> <pre><code>markdown_extensions:\n  - attr_list\n</code></pre> <p>Then specify a downloadable file as <code>\\[name\\](URL){:download=\"filename\"}</code> NOTE: As yet unable to make the browser display a text file, it always downloads, at least when previewing. Apparently this is specified by the server</p>"},{"location":"3dPrinting/Klipper/","title":"Klipper","text":""},{"location":"3dPrinting/Klipper/#install-klipper-on-cr-10s","title":"Install Klipper on CR-10S","text":"<p>Klipper Documentation Klipper configs at Github My working config with BLTouch Klipper cartesian printer example cfg Generic ramps cfg Klipper Cr10S cfg Sample lcd cfg Sample aliases cfg Contains information mapping arduino atmega pins to Klipper pins (arx -&gt; Py)</p> <p>Used the Klipper Cr10s file as a starting point, </p> <ul> <li>substituted the LCD portion from sample-lcd.config,</li> <li>added bed screws and bed-levelling sections.</li> <li>Added start print and end print gcode sections from sample-macros.cfg in Klipper configs.</li> <li>NOTE: not working Added heater_fan section based on  this and this. The goal was to have the part cooling fan oinly run when the heater was above a certain temperature.</li> </ul>"},{"location":"3dPrinting/Klipper/#todo","title":"TODO","text":"<ul> <li>Probe print region before print</li> <li>Clean nozzle before print</li> <li>Exclude object section in printer.cfg</li> </ul>"},{"location":"3dPrinting/Klipper/#printercfg","title":"printer.cfg","text":"<p>Ramps board pinout diagram Ramps 1.4 wiki page LCD wiki page</p> <p>Marlin CR10S config Marlin Creality Ramps pins file Marlin Ramps pins file</p> <p>Marlin settings</p>"},{"location":"3dPrinting/Klipper/#videos","title":"Videos","text":"<p>Video showing how to create a printer.cfg from scratch. Good tips about getting certain settings from Marlin.</p>"},{"location":"3dPrinting/Klipper/#odds-and-ends","title":"Odds and ends","text":"<ul> <li>Load bed mesh before each print - add to gcode: <code>BED_MESH_PROFILE load=default</code></li> </ul>"},{"location":"computers/BackupServer/","title":"BackupServer","text":""},{"location":"computers/BackupServer/#backup-server-config","title":"Backup server config","text":"<ul> <li>Hostname: backup-server</li> <li>Debian 12 installed without GUI desktop</li> <li>allow root login with password via ssh: Edit <code>/etc/ssh/sshd_config</code>, change the line for <code>PermitRootLogin</code> to say <code>yes</code>. Reboot.</li> <li>Add sudo to debian (see linux howtos)</li> <li>Added user shiva to suoers list (see Linux howtos)   </li> <li>mdns set up</li> <li>Mounted 3 disks   under media as d1-1tb, d1-4ttb and d2-4tb</li> <li>setup nfs shares under /exports</li> </ul>"},{"location":"computers/HPStreamBackup/","title":"HP Stream Mini Desktop (Model No:TPC-P041-BX)","text":"<p>Spec sheet: https://www.hp.com/hpinfo/newsroom/press_kits/2015/2015CES/PavilionMiniDesktop.pdf</p> <ul> <li>4 USB 3.0 slots, Bluetooth, wireless.</li> <li>Processor: Intel\u00ae Pentium\u00ae processor 3558U(2b)</li> <li>Memory: 4GB PC3-12800 DDR3L-1600 SDRAM memory (3) 1X4GB</li> <li>Hard drive: 500GB 7200RPM Serial ATA hard drive(4a)</li> <li>Graphics: Intel\u00ae HD Graphics(16)</li> </ul>"},{"location":"computers/HomeProxmoxServer/","title":"Home Proxmox Server","text":""},{"location":"computers/HomeProxmoxServer/#proxmox-main-server-setup-pvelocal","title":"Proxmox main server setup (pve.local)","text":""},{"location":"computers/HomeProxmoxServer/#general-config","title":"General config","text":"<ul> <li>2TB WD nvme for OS and VMs, Proxmox manages it.</li> <li>4TB Klevv Cras nvme for nfs share via file-server VM</li> <li>mDns configured on server, name pve.local</li> <li>run post pve install script Disables enterprise repo, enables no-subscription repo, disables high-availability, etc.</li> <li>d2-4tb configured as backup storage for VZDump</li> <li>backups - not scheduled yet</li> <li>backups for VMs</li> <li>file server backs up 4TB disk to backup-server</li> <li>Download containers as described here <code>pveam update   pveam available   pveam download local &lt;filename&gt;</code></li> <li>After downloading the containers are available in the GUI: <code>pve -&gt; local -&gt; CT templates</code></li> </ul>"},{"location":"computers/HomeProxmoxServer/#templates","title":"Templates","text":""},{"location":"computers/HomeProxmoxServer/#deb12template","title":"deb12Template","text":"<ul> <li>Debian configured with mDns, sudoer and root login.</li> <li>NFS client libs installed (nfs-common).</li> <li>scripts directory under <code>/home/shiva/</code> with some utils.</li> <li>To create a VM from this: <code>GUI-&gt;right-click-&gt;Clone</code>. </li> <li>If not a temporary VM, select <code>Full clone</code> in the next dialog.</li> <li>After startup, run <code>sudo ~/scripts/change_hostname.sh</code>. After entering the new hostname, at the prompt, reboot. The VM will be accessible at <code>&lt;hostname&gt;.local</code></li> <li>Optionally, to mount the 4tb disk, run <code>~/scripts/mount_shared_drive.sh</code>. This will mount the drive at <code>/mnt/nfs/fs/disk4tb</code>.</li> </ul>"},{"location":"computers/HomeProxmoxServer/#lmintxfcetemplate","title":"lmintXfceTemplate","text":"<ul> <li>Linux mint with xfce</li> <li>ssh installed with <code>sudo apt install ssh</code></li> <li>avahi installed</li> <li>nfs disk mounted at /mnt/nfs/...</li> </ul>"},{"location":"computers/HomeProxmoxServer/#win10protemplate","title":"win10ProTemplate","text":"<p>Based on Win 10 Pro, and has <code>/fs.local/exports/disk4tb</code> mounted as drive Z:.  Guide for Proxmox configuration steps. When going through the installer, at a stage, it insists that you create  a Microsoft account. See this video for a good explanation. Essentially:</p> <ul> <li>when the installer asks for your microsoft account, in ProxMox, go to  <code>VM-&gt;Hardware-&gt;Network</code> and doubple click, which brings up the edit dialog. Select the <code>Disconnected</code> checkbox. </li> <li>Then, in the installer, select <code>Create account</code>. At this point, the installer will just give you the option to create a username for the computer user. Once you get past this stage, reconnect the disconnected network interface.</li> <li>After installation, mount the nfs drive and make it persistent</li> </ul>"},{"location":"computers/HomeProxmoxServer/#vms","title":"VMs","text":""},{"location":"computers/HomeProxmoxServer/#fs-file-server","title":"fs (file server)","text":"<p>Full clone of deb12Template. Serves the 4tb nvme disk to the network via nfs and smb (for Windows machines). Using a VM instead of a container because nfs-kernel-server doesn't work well with containers.</p> <ul> <li> <p>PCIe passthrough Has the disk passed using pcie passthrough.After creating the VM, <code>root@pve:~# qm set 101 -scsi1 /dev/disk/by-id/nvme-KLEVV_CRAS_C910_M.2_NVMe_SSD_4TB_2024051002002470</code></p> </li> <li> <p>Mounted in /etc/fstab with </p> </li> </ul> <pre><code>UUID=cbf3cf4a-38b6-4d91-8f90-e06d0202af3d  /media/disk4tb  ext4  defaults  0 1\n</code></pre> <ul> <li>Shared via <code>/exports/disk4tb</code>. <code>/media/disk4tb</code> is bind mounted to <code>exports/disk4tb</code> in <code>/etc/fstab</code>: </li> </ul> <pre><code>/media/disk4tb /exports/disk4tb none bind,rw\n</code></pre> <ul> <li> <p>Important: exclude this disk from VM backup. We backup this disk manually. In gui select <code>fs -&gt; hardware -&gt; Hard disk (scsi1)</code> then click <code>Edit</code> and then <code>Advanced</code>. Deselect the <code>Backup</code> checkbox. </p> </li> <li> <p>A nightly cron job is scheduled that backs up disk4tb to backup-server.</p> </li> </ul> <pre><code>0 2 * * * rsync -avz /media/disk4tb/data/ /mnt/nfs/backup-server/d1-4tb/backup-disk4tb/data/\n</code></pre> <ul> <li> <p>To nfs mount the 4TB disk on another machine</p> <ul> <li>install nfs-common: <code>sudo apt install nfs-common</code></li> <li>add the following line to /etc/fstab: <code>fs.local:/exports/disk4tb /mnt/nfs/fs/disk4tb nfs defaults 0 0</code> </li> </ul> </li> <li> <p>Backup for the fs VM:  Scheduled via GUI: <code>Datacenter-&gt;Backups</code></p> </li> <li> <p>SMB share <code>/exports/disk4tb</code> is also shared via SMB, only for Windows and only to user <code>shiva</code>. </p> <ul> <li> <p>Follows this guide for installation, and  this guide on how to set up SMB shares with authentication.</p> </li> <li> <p>Only one samba user, <code>shiva</code>, and all access must be made using this user: <code>sudo smbpasswd -a shiva</code></p> </li> <li> <p>wsdd - Allows the shared directories to be discoverable by Windows. Install with <code>apt install wsdd</code>, Github page</p> </li> </ul> </li> <li> <p>A nightly cron job is scheduled that backs up disk4tb to backup-server.</p> </li> </ul> <pre><code>0 2 * * * rsync -avz /media/disk4tb/data/ /mnt/nfs/backup-server/d1-4tb/backup-disk4tb/data/\n</code></pre>"},{"location":"computers/HomeProxmoxServer/#ms-media-server","title":"ms (Media server)","text":"<p>Cloned from <code>fs</code> template. Has 4tb disk mounted at <code>/media/disk4tb</code> - Jellyfin installed from website installation instr.   </p> <p>picoreplayer + pirate audio: this post</p>"},{"location":"computers/LinuxHowTos/","title":"Linux How-Tos","text":""},{"location":"computers/LinuxHowTos/#typical-linux-command-line-stuff","title":"Typical Linux command line stuff","text":""},{"location":"computers/LinuxHowTos/#bind-mount","title":"Bind mount","text":"<p>Kernel feature, mounts a directory somewhere else in the directory tree.</p> <pre><code>mount --bind /some/where /else/where\nmount -o bind /some/where /else/where\n</code></pre> <p>Bind mounts in <code>/etc/fstab</code>: <code>/media/d1-1tb /exports/d1-1tb none bind,rw</code></p>"},{"location":"computers/LinuxHowTos/#assign-static-ip-debianubuntu","title":"Assign static IP (Debian/Ubuntu)","text":"<p>Use the Network Manager app. (Search \"network\" in startmenu)</p>"},{"location":"computers/LinuxHowTos/#find-ip-address","title":"Find IP address","text":"<p><code>ip addr</code></p>"},{"location":"computers/LinuxHowTos/#see-disks-with-id-ls-devby-id","title":"See disks with id <code>ls /dev/by-id/</code>","text":""},{"location":"computers/LinuxHowTos/#nfs-file-sharing","title":"NFS file sharing","text":"<p>A simple guide - open access. Server side</p> <pre><code>sudo apt install nfs-kernel-server\nsudo mkdir /mnt/myshareddir\nsudo chown nobody:nogroup /mnt/myshareddir #no-one is owner\nsudo chmod 777 /mnt/myshareddir #everyone can modify files\n</code></pre> <p>Add line to <code>/etc/exports</code></p> <pre><code>/mnt/mysharedir  *.local(rw,sync,no_root_squash,no_subtree_check) 192.168.68.1/24(rw,sync,no_root_squash,no_subtree_check)\n</code></pre> <pre><code>sudo exportfs -a #making the file share available\nsudo systemctl restart nfs-kernel-server #restarting the NFS kernel\n</code></pre> <p>Client side</p> <pre><code>sudo apt install nfs-common\n</code></pre> <p>Check if mount is available: <code>sudo showmount -e &lt;server_hostname&gt;</code></p> <pre><code>sudo mkdir /mnt/locally-mounted\n#Mount syntax below\n#sudo mount -t nfs {IP of NFS server}:{folder path on server} /mnt/locally-mounted\nsudo mount -t nfs backup-server.local:/mnt/myshareddir /mnt/locally-mounted\n</code></pre> <p>Temporary mount:</p> <pre><code>sudo mount -t nfs4 backup-server.local:/exports/test /mnt/nfs/ -o defaults,user,exec,_netdev\n</code></pre> <p>Mount at boot: <code>/etc/fstab</code> entry:</p> <pre><code>{IP of NFS server}:{folder path on server} /var/locally-mounted nfs defaults 0 0\n</code></pre>"},{"location":"computers/LinuxHowTos/#samba-notes","title":"Samba notes","text":"<p>Unable to set up smb so that (a) the share is not public and (b) the written files have the same user permissions, regardless of which machine is writing them. </p> <p>Follow these simple installation instructions and configure <code>smb.conf</code> following these worked examples (CAUTION, they don't quite work as advertised)</p>"},{"location":"computers/LinuxHowTos/#mounting-disk","title":"Mounting disk","text":"<p>Follow: https://www.wikihow.com/Linux-How-to-Mount-Drive - edit /etc/fstab, add lines like <code>UUID=&lt;...&gt; /mount/point ext4 defaults 0 0</code> - find UUID of each mounted partition via <code>ls -l /dev/disk/by-uuid/</code> - For temporary mount <code>mount /dev/sdb /mount/point</code> suffices - Unmounting: <code>umount /mount/point</code> - Current <code>/etc/fstab</code> entries for all 4 disks:     <code>UUID=db23fd57-5a7b-421e-b96e-0d235eb5b354  /media/disk4tb  ext4  defaults 0 0     UUID=d8984d8f-0128-4791-b299-69f26b5f6eaa /media/disk1tb ext4 defaults 0 0     UUID=bf75d5b6-6531-48b3-8b52-a155c96e013e /media/backupdisk4tb ext4 defaults 0 0     UUID=82108674-0fa7-4d58-85b3-0c9371a99b84 /media/backupdisk1tb ext4 defaults 0 0</code></p>"},{"location":"computers/LinuxHowTos/#mounting-smb-disk","title":"Mounting SMB disk","text":"<p>Follow: https://www.linode.com/docs/guides/linux-mount-smb-share/ - Install cifs: <code>apt install cifs-utils psmisc</code> - Check with <code>mount -t cifs</code></p> <p>Add the following lines to <code>/etc/fstab</code></p> <pre><code>//deb-fs-vm/smb-disk4tb /mnt/smbdisk4tb cifs x-systemd.automount,rw,relatime,vers=3.1.1,cache=strict,credentials=/home/shiva/.credentials,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n//deb-fs-vm/smb-disk1tb /mnt/smbdisk1tb cifs x-systemd.automount,rw,relatime,vers=3.1.1,cache=strict,credentials=/home/shiva/.credentials,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>The <code>x-systemd.automount</code> mounts the disk at first access. (This may cause issues with programs that need the disks to be mounted at boot time)\\ Create a <code>/home/shiva/.credentials</code> file that looks like:</p> <pre><code>username=shiva\npassword=&lt;pw&gt;\n</code></pre>"},{"location":"computers/LinuxHowTos/#check-what-shares-are-available-on-a-server","title":"Check what shares are available on a server","text":"<p><code>smbclient -L &lt;server IP or name&gt;</code></p>"},{"location":"computers/LinuxHowTos/#disk-performance-with-dd","title":"Disk performance with dd","text":"<p>throughput.sh</p> <pre><code>#!/bin/sh\ndd if=/dev/zero of=./throughput.img bs=1G count=1 oflag=dsync\n</code></pre> <p>latency.sh</p> <pre><code>#!/bin/sh\ndd if=/dev/zero of=./latency.img  bs=512 count=1000 oflag=dsync\n</code></pre>"},{"location":"computers/LinuxHowTos/#network-performance-with-iperf-from-here","title":"Network performance with iperf from here","text":"<p><code>sudo apt install iperf</code> on one machine:  <code>iperf -s  # start iperf server</code> on the other machine: <code>iperf -c &lt;address of other computer&gt;</code></p>"},{"location":"computers/LinuxHowTos/#set-up-mdns-get-xxxlocal-dns-values","title":"Set up mDNS  (Get xxx.local DNS values)","text":"<pre><code>apt-get install avahi-daemon\n#### Firewall (here uncomplicated firewall on ubuntu)\nufw allow mdns\n</code></pre> <p>Fix /etc/nsswitch.conf</p> <pre><code>CHANGE  hosts:          files mdns4_minimal [NOTFOUND=return] dns mdns4\nTO      hosts:          files mdns4_minimal dns mdns4 [NOTFOUND=return]\n</code></pre> <p>/etc/avahi/avahi-daemon.conf [publish] publish-workstation=yes</p> <pre><code>#### If you don't like applications to publish their services\ndisable-user-service-publishing=yes\n</code></pre> <p>/etc/avahi/services/</p> <pre><code>Remove services (files) that you don't want to publish\n</code></pre> <p>Restart daemon <code>service avahi-daemon restart</code></p>"},{"location":"computers/LinuxHowTos/#view-all-mdns-services-on-the-network","title":"View all mDns services on the network","text":"<pre><code>avahi-browse --all       - or - \nmdns-scan\n</code></pre>"},{"location":"computers/LinuxHowTos/#add-sudo-to-debian-not-installed-by-default","title":"Add sudo to Debian (not installed by default)","text":"<p>Change to root using <code>su -</code></p> <pre><code>apt install sudo\nusermod -aG sudo [username] \n</code></pre> <p>reboot.</p>"},{"location":"computers/LinuxHowTos/#allow-root-login-with-password-on-debian","title":"Allow root login with password on Debian","text":"<p>Follow: https://linuxconfig.org/enable-ssh-root-login-on-debian-linux-server Edit <code>/etc/ssh/sshd_config</code>, change the line for <code>PermitRootLogin</code> to say <code>yes</code>. Reboot.</p>"},{"location":"computers/LinuxHowTos/#disk-formatting-and-partitioning-dd-wipefs-fdisk","title":"Disk formatting and partitioning (dd, wipefs, fdisk)","text":"<ul> <li>list disks: <code>lsblk</code></li> <li>Delete all partitions: </li> <li>Option 1: <code>wipefs -a /dev/sdx</code></li> <li>Option 2: <code>dd if=/dev/zero of=/dev/[disk device] bs=512 count=1</code>  (only remove MBR, fast)</li> <li>Option 3: <code>dd if=/dev/zero of=/dev/[disk device] bs=100M oflag=direct status=progress</code>  (writes zeros to the whole disk, oflag and bs speed things up considerably)</li> <li>Create partitions with <code>fdisk</code> Follow this guide. <code>fdisk</code> is an interactive program and quite intuitive.</li> </ul>"},{"location":"computers/LinuxHowTos/#see-nfs-shares-from-an-ip-or-hostname","title":"See NFS shares from an IP or hostname","text":"<p><code>showmount -e &lt;IP or hostname&gt;</code></p>"},{"location":"computers/LinuxHowTos/#handy-dns-sd-commands","title":"Handy dns-sd Commands","text":"<ul> <li> <p><code>dns-sd -B _http</code> \u2013 search the LAN for any HTTP services and update when any new ones are found.</p> </li> <li> <p><code>dns-sd -R myservice _http._tcp local 8080</code> \u2013 Advertise a local HTTP service on port 8080 to your local network (whether there actually is one or not).</p> </li> <li> <p><code>dns-sd -L dns-sd -L myservername _http._tcp local</code> \u2013 resolve the IP/domain and port of an advertised service.</p> </li> </ul>"},{"location":"computers/LinuxMintDesktop/","title":"Linux Mint Desktop XFCE","text":""},{"location":"computers/LinuxMintDesktop/#add-an-appimage-application-to-the-dock","title":"Add an AppImage application to the dock","text":"<p>Solution: https://forums.linuxmint.com/viewtopic.php?t=300594</p> <ul> <li>right click on the menu botton and select edit applications. </li> <li>select the heading you want your app to appear under hit the + sign</li> <li>fill in the info</li> <li>change the name from New Launcher to your desired name for the app.</li> <li>click on the icon button select an Icon you want to use (you may have to down load one for your app). </li> <li>save (save button in the toolbar, unintuitive) and exit,</li> <li>you may have to log out and back in for it to show up. </li> </ul>"},{"location":"computers/LinuxMintDesktop/#add-a-general-application-to-the-dock","title":"Add a general application to the dock","text":""},{"location":"computers/LinuxMintDesktop/#problem-with-suspend","title":"Problem with suspend","text":"<p>Suspending after inactivity was failing because a popup window was coming up asking for authentication. \\ Solution: https://askubuntu.com/questions/543921/authentication-required-before-suspend</p> <p><code>locate -b org.freedesktop.login1.policy</code></p> <p>The file is in </p> <p><code>/usr/share/polkit-1/actions/org.freedesktop.login1.policy</code></p> <p>In this file, below the entry for </p> <p><code>&lt;action id=\"org.freedesktop.login1.suspend\"&gt;</code></p> <p>set the entries to  </p> <pre><code>&lt;defaults&gt;\n    &lt;allow_any&gt;yes&lt;/allow_any&gt;\n    &lt;allow_inactive&gt;yes&lt;/allow_inactive&gt;\n    &lt;allow_active&gt;yes&lt;/allow_active&gt;\n&lt;/defaults&gt;\n</code></pre>"},{"location":"computers/ProxMox/","title":"ProxMox","text":""},{"location":"computers/ProxMox/#proxmox-setup-etc-proxvelocal","title":"Proxmox setup etc  (proxve.local)","text":""},{"location":"computers/ProxMox/#general-info","title":"General info","text":"Naming convention, types of VMs, disks  - Naming convention for VMs and CTs: --, e.g. deb-nas-ct, ub-media-vm - proxve has the static address 192.168.1.10. All the VMs use mDNS. - proxve can be accessed at proxve.local (See mDNS below) - List of disks:           ```     /dev/disk/by-id/ata-WDC_WD40EZAZ-00SF3B0_WD-WX62D62K61TY -&gt; ../../sda     /dev/disk/by-id/ata-ST31000528AS_9VP9397Y -&gt; ../../sdb     /dev/disk/by-id/ata-WDC_WD40EZAZ-00SF3B0_WD-WX62D6232HXC -&gt; ../../sdc     /dev/disk/by-id/ata-ST31000528AS_9VP93P1W -&gt; ../../sdd     /dev/disk/by-id/ata-Samsung_SSD_840_Series_S14GNEBCC25241K -&gt; ../../sde     ``` - There are only two VMs that have the 4 physical disks passed through to them (see Pass through below). `deb-fs-vm` and `lmint-direct_disk-vm`. These two should not be started at the same time, for disk safety.  - `deb-fs-vm` has two functions:     - provide samba shares for other VMs identified by:         ```         //deb-fs-vm/smb-disk4tb         //deb-fs-vm/smb-disk1tb         ```       - backup the disks to their backup counterparts. - `lmint-direct-disk-vm` mounts all 4 disks, but does not provide any samba shares, it is for disk maintenance and operations that may require a GUI program."},{"location":"computers/ProxMox/#templates","title":"Templates","text":"<ul> <li>deb-template: User shiva, sudo, mdns configured. Has a script:  <code>/home/shiva/mount_smb.sh</code> for mounting the two samba disks.</li> <li>lmint-template: User shiva configured. Has a script: <code>/home/shiva/mount_smb.sh</code> for mounting the two samba disks.</li> </ul>"},{"location":"computers/ProxMox/#create-vm-from-template","title":"Create VM from template","text":"<ul> <li>Clone the template and change the file <code>/etc/hostname</code>. Reboot. Optionally,  run <code>apt update</code> and <code>apt upgrade</code>.</li> </ul>"},{"location":"computers/ProxMox/#vm-for-file-server-deb-fs-vm-vm-id-107","title":"VM for file server (deb-fs-vm, VM ID 107)","text":"<ul> <li>Create VM from the debian template iso 2048/1096 mem/swap, 1 cpu, 8G disk, DHCP</li> <li>Set up mDNS (See LinuxHowTos)</li> <li> <p>Pass through physical disks:</p> <ul> <li>On proxve, run:\\  <code>find /dev/disk/by-id/ -type l|xargs -I{} ls -l {}|grep -v -E '[0-9]$' |sort -k11|cut -d' ' -f9,10,11,12 | grep -v wwn</code>\\ The output is:\\ ``` /dev/disk/by-id/ata-WDC_WD40EZAZ-00SF3B0_WD-WX62D62K61TY -&gt; ../../sda /dev/disk/by-id/ata-ST31000528AS_9VP9397Y -&gt; ../../sdb /dev/disk/by-id/ata-WDC_WD40EZAZ-00SF3B0_WD-WX62D6232HXC -&gt; ../../sdc /dev/disk/by-id/ata-ST31000528AS_9VP93P1W -&gt; ../../sdd /dev/disk/by-id/ata-Samsung_SSD_840_Series_S14GNEBCC25241K -&gt; ../../sde</li> </ul> <p><code>`` Execute command below using the scsi2 - scsi5, for the 4 disks:\\</code>qm link 107 -scsi2 /dev/disk/by-id/ata-WDC_WD40EZAZ-00SF3B0_WD-WX62D62K61TY<code>- Automount the disks: (See LinuxHowTos) - Mount by UUID. Find the UUID's by executing</code>ls -l /dev/disk/by-uuid/<code>. The line is</code>UUID=&lt;...&gt; /mount/point ext4 defaults 0 0` - The mount points are in /media/, disk4tb, backupdisk4tb, disk1tb, backupdisk1tb. - Note: The 1 TB disks have some residual partition on them. Clean them out once the data is organized.</p> </li> <li> <p>Samba: (see LinuxHowTos)</p> <ul> <li>Install Samba: <code>apt install samba</code></li> <li>add user 'shiva' to the samba group: <code>smbpasswd -a shiva</code></li> <li>Add entries in <code>/etc/samba/smb.conf</code> for the two shared disks</li> </ul> </li> </ul>"},{"location":"computers/ProxMox/#torrent-downloader-lmint-torrent_vm","title":"Torrent downloader (lmint-torrent_vm)","text":"<ul> <li>NordVPN, qTorrent, installed, smb disks mounted</li> <li>While connected to VPN, cannot access smb disks</li> <li>Torrent downloads stored in ~/TDownload/</li> <li>Occasionally move downloaded files to disk4tb</li> </ul>"},{"location":"computers/ProxMox/#mount-smb-shares-see-linuxhowtos","title":"Mount SMB shares: (see LinuxHowTos)","text":""},{"location":"computers/ProxMox/#mdns-see-linuxhowtos","title":"mDNS (see LinuxHowTos)","text":""},{"location":"computers/ProxMox/#pass-through-physical-disks-to-a-vmct","title":"Pass through physical disks to a VM/CT","text":"<p>Follow: https://pve.proxmox.com/wiki/Passthrough_Physical_Disk_to_Virtual_Machine_(VM)</p> <p>To get disk info:</p> <pre><code>root@proxve:~# lsblk |awk 'NR==1{print $0\" DEVICE-ID(S)\"}NR&gt;1{dev=$1;printf $0\" \";system(\"find /dev/disk/by-id -lname \\\"*\"dev\"\\\" -printf \\\" %p\\\"\");print \"\";}'|grep -v find /dev/disk/by-id/ -type l|xargs -I{} ls -l {}|grep -v -E '[0-9]$' |sort -k11|cut -d' ' -f9,10,11,12 | grep -v wwn-E 'part|lvm' \n</code></pre> <p>For a short list:</p> <pre><code>find /dev/disk/by-id/ -type l|xargs -I{} ls -l {}|grep -v -E '[0-9]$' |sort -k11|cut -d' ' -f9,10,11,12\n</code></pre> <p>Hot plug hhysical device as a virtual scsi disk:\\ <code>qm set &lt;VM #&gt; -scsi2 (or 3, 4, etc) /dev/disk/by-id/ata-ST3000DM001-1CH166_Z1F41BLC</code></p> <p>To remove:\\ <code>qm unlink &lt;VM #&gt; --idlist scsi2</code></p>"},{"location":"computers/ProxMox/#todo","title":"ToDo","text":"<ul> <li> <p>Create deb-fs-vm from deb-template</p> <ul> <li>publish samba shares</li> <li>LATER: change the file and dir permissions to 755 for all the disks</li> <li>LATER: add backup cron job</li> </ul> </li> <li> <p>Create lmint-template </p> <ul> <li>Create a vm from from lmint iso</li> <li>add mdns</li> <li>add scripts for smb manual mounting, adding smb to /etc/fstab</li> </ul> </li> <li> <p>Create lmint-direct-disk-vm </p> <ul> <li>create vm from lmint-template</li> <li> </li> </ul> </li> <li> <p>Now I'll type a program   </p> </li> </ul>"},{"location":"computers/ProxMox/#pass-through-physical-disks","title":"Pass through physical disks","text":""},{"location":"computers/ProxMoxBestPractices/","title":"ProxMoxBestPractices","text":"<p>From Youtube: https://www.youtube.com/watch?v=VAJWUZ3sTSI</p> <p>Enable iommu</p>"},{"location":"computers/ProxMoxBestPractices/#proxmox-helper-scripts","title":"Proxmox helper scripts:","text":"<p>https://community-scripts.github.io/ProxmoxVE/scripts Post pve install script Disables enterprise repo, enables no-subscription repo, disables high-availability, etc.</p>"},{"location":"computers/ProxMoxBestPractices/#remove-enterprise-repo-add-no-subscription-repo","title":"Remove enterprise repo, add no-subscription repo","text":"<p>Reddit link Summary:In GUI, select the node, There is a detail entry for <code>Repositories</code>. To remove enterprise repos, select and click <code>Disable</code>. To add no-subscription repo, click <code>Add</code>, and in the dialog that appears, select <code>No-subscription</code> from the dropdown. Screenshot</p>"},{"location":"computers/ProxmoxHowTos/","title":"ProxmoxHowTos","text":""},{"location":"computers/ProxmoxHowTos/#introduction","title":"Introduction","text":""},{"location":"computers/ProxmoxHowTos/#installation","title":"Installation","text":""},{"location":"computers/ProxmoxHowTos/#initial-configuration","title":"Initial Configuration","text":""},{"location":"computers/ProxmoxHowTos/#networking-setup","title":"Networking Setup","text":""},{"location":"computers/ProxmoxHowTos/#storage-configuration","title":"Storage Configuration","text":""},{"location":"computers/ProxmoxHowTos/#creating-virtual-machines","title":"Creating Virtual Machines","text":""},{"location":"computers/ProxmoxHowTos/#managing-containers","title":"Managing Containers","text":""},{"location":"computers/ProxmoxHowTos/#backup-and-restore","title":"Backup and Restore","text":""},{"location":"computers/ProxmoxHowTos/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"computers/ProxmoxHowTos/#troubleshooting","title":"Troubleshooting","text":""},{"location":"computers/ProxmoxHowTos/#advanced-tips-and-tricks","title":"Advanced Tips and Tricks","text":""},{"location":"computers/AI/AI/","title":"AI","text":""},{"location":"computers/AI/AI/#ai-notes","title":"AI Notes","text":"<ul> <li> <p>Model size and quantization: Good article</p> <ul> <li>Main takeaway: run at Q4_K_M if possible, otherwise at Q3_K_M</li> </ul> </li> <li> <p>Ollama </p> <ul> <li>Documentation</li> <li>Model library</li> <li>Ollama copilot</li> <li>download a particular size model: :, e.g. <code>ollama pull granite3.1-dense:8b</code> <li>download a particular quantization type</li> <li>Set context size</li> <li>Model use cases:<ul> <li>Coding:<ul> <li>Codellama (7B, 13B, 34B)</li> <li>WizardCoder (15B)</li> </ul> </li> <li>Documentation writing <ul> <li></li> </ul> </li> </ul> </li> <li> <p>Coding assistant in VScode</p> <ul> <li>Continue plugin<ul> <li>Article using IBM granite (good for resources, but tab completions doesn't seem to work)</li> </ul> </li> </ul> </li> <li> <p>AI Literature</p> <ul> <li>Wolfram's article</li> </ul> </li>"}]}